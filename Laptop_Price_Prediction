# Importing necessary libraries

import seaborn as sns
import io
from google.colab import files  # For uploading files in Google Colab
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Uploading the dataset

print("Please upload the dataset file (CSV format):")
data = files.upload()
print("\nDataset uploaded successfully!")

# Step 2: Loading the dataset

print("\nLoading the dataset...")
df = pd.read_csv('Laptop_price.csv')
print("Dataset loaded successfully!")

# Step 3: Initial Data Inspection

print("\nPreviewing the first 5 rows of the dataset:")
print(df.head())  # Display the first 5 rows of the dataset


print("\nDataset Overview:")
print(f"Shape of the dataset: {df.shape}")  # Display the shape of the dataset
print("\nColumn Data Types:")
print(df.dtypes)  # Display data types of columns

print("\nChecking for missing values in the dataset:")
print(df.isnull().sum())  # Check for null values in the dataset

print("\nSummary statistics of numerical columns:")
print(df.describe())  # Display descriptive statistics

plt.figure(figsize=(10, 6))
sns.boxplot(x='Brand', y='Price', data=df)
plt.title("Price Distribution Across Brands")
plt.xlabel("Brand")
plt.ylabel("Price ($)")
plt.xticks(rotation=45)
plt.show()


# Step 4: Data Preprocessing

print("\nPreparing the dataset for model training...")
# Dropping the 'Brand' column as it's not relevant for prediction
df.drop(['Brand'], axis=1, inplace=True)

# Displaying correlation of features with 'Price'
print("\nFeature correlation with Price (descending order):")
print(df.corr()['Price'].sort_values(ascending=False))

# Selecting predictor variables
features = ['Processor_Speed', 'Screen_Size', 'Weight', 'RAM_Size', 'Storage_Capacity']
x = df[features]
y = df['Price']
print("\nData preparation completed!")

# Step 5: Splitting data into training and testing sets

print("\nSplitting the dataset into training and testing sets...")
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=100)
print("Data successfully split!")

# Step 6: Model Training

print("\nTraining the Linear Regression model...")
model = LinearRegression()
model.fit(x_train, y_train)
print("Model training completed!")

# Step 7: Model Evaluation

print("\nEvaluating the model on the test dataset...")
y_pred = model.predict(x_test)
print("Evaluation Metrics:")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R-squared Score:", r2_score(y_test, y_pred))

# Compute residuals
residuals = y_test - y_pred

# Plot residuals
plt.figure(figsize=(8, 5))
sns.histplot(residuals, kde=True, color='orange', bins=20)
plt.title("Distribution of Residuals")
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.axvline(0, color='red', linestyle='--', label='Zero Error')
plt.legend()
plt.show()


# Step 8: Predicting Laptop Price based on user inputs

print("\nEnter the details to predict the laptop price:")
try:
    Processor_Speed = float(input("Processor Speed (GHz): "))
    Screen_Size = float(input("Screen Size (inches): "))
    Weight = float(input("Weight (kg): "))
    RAM_Size = int(input("RAM Size (GB): "))
    Storage_Capacity = int(input("Storage Capacity (GB): "))
    
    print("\nProcessing your inputs...")
    # Creating a DataFrame for the user input
    Laptop = pd.DataFrame([[Processor_Speed, Screen_Size, Weight, RAM_Size, Storage_Capacity]], 
                          columns=features)
    predicted_price = model.predict(Laptop)
    print(f"\nBased on your inputs, the predicted laptop price is: ${predicted_price[0]:.2f}")
except Exception as e:
    print("Error in input:", e)

# Step 9: Visualization

# Scatter plot: Storage Capacity vs Price
print("\nGenerating visualizations to understand data trends...")
plt.figure(figsize=(8, 5))
plt.scatter(df['Storage_Capacity'], df['Price'], color='violet', alpha=0.6)
plt.title('Storage Capacity vs Price')
plt.xlabel('Storage Capacity (GB)')
plt.ylabel('Price ($)')
plt.show()

# Scatter plot: Actual vs Predicted Prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', edgecolor='k', alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=3, label='Perfect Prediction')
plt.xlabel('Actual Price ($)')
plt.ylabel('Predicted Price ($)')
plt.title('Actual vs Predicted Laptop Prices')
plt.legend()
plt.show()

# Scatter plots for each feature vs Price
for feature in features:
    plt.figure(figsize=(8, 5))
    plt.scatter(df[feature], df['Price'], color='purple', alpha=0.5)
    plt.xlabel(feature)
    plt.ylabel('Price ($)')
    plt.title(f'{feature} vs Price')
    plt.show()
